// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models/offline_exchange_rates.dart';
import '../models/pouch_settings.dart';
import '../models/subscription.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 7556023722811114196),
      name: 'Subscription',
      lastPropertyId: const IdUid(10, 5295285214334090711),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 855636020998952695),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6322804560156765019),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7414185269425451308),
            name: 'type',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1250600073139365883),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2666782370693456411),
            name: 'color',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 8014419391841208591),
            name: 'currency',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 64317913661464896),
            name: 'isTaxFixed',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3021903025124407922),
            name: 'tax',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 518126410087830967),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5295285214334090711),
            name: 'month',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 7300612694639468787),
      name: 'PouchSettings',
      lastPropertyId: const IdUid(2, 2097682989487805450),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9204892922263164436),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2097682989487805450),
            name: 'currency',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 4406033360423146065),
      name: 'OfflineExchangeRates',
      lastPropertyId: const IdUid(2, 3655446572548557335),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9083052610243439321),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 3655446572548557335),
            name: 'serializedRates',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 4406033360423146065),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Subscription: EntityDefinition<Subscription>(
        model: _entities[0],
        toOneRelations: (Subscription object) => [],
        toManyRelations: (Subscription object) => {},
        getId: (Subscription object) => object.id,
        setId: (Subscription object, int id) {
          object.id = id;
        },
        objectToFB: (Subscription object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final currencyOffset = fbb.writeString(object.currency);
          final dateOffset = fbb.writeString(object.date);
          final monthOffset = fbb.writeString(object.month);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.type);
          fbb.addFloat64(3, object.price);
          fbb.addInt64(4, object.color);
          fbb.addOffset(5, currencyOffset);
          fbb.addBool(6, object.isTaxFixed);
          fbb.addFloat64(7, object.tax);
          fbb.addOffset(8, dateOffset);
          fbb.addOffset(9, monthOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Subscription(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    PouchSettings: EntityDefinition<PouchSettings>(
        model: _entities[1],
        toOneRelations: (PouchSettings object) => [],
        toManyRelations: (PouchSettings object) => {},
        getId: (PouchSettings object) => object.id,
        setId: (PouchSettings object, int id) {
          object.id = id;
        },
        objectToFB: (PouchSettings object, fb.Builder fbb) {
          final currencyOffset = fbb.writeString(object.currency);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, currencyOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PouchSettings(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    OfflineExchangeRates: EntityDefinition<OfflineExchangeRates>(
        model: _entities[2],
        toOneRelations: (OfflineExchangeRates object) => [],
        toManyRelations: (OfflineExchangeRates object) => {},
        getId: (OfflineExchangeRates object) => object.id,
        setId: (OfflineExchangeRates object, int id) {
          object.id = id;
        },
        objectToFB: (OfflineExchangeRates object, fb.Builder fbb) {
          final serializedRatesOffset = fbb.writeString(object.serializedRates);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, serializedRatesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OfflineExchangeRates(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Subscription] entity fields to define ObjectBox queries.
class Subscription_ {
  /// see [Subscription.id]
  static final id =
      QueryIntegerProperty<Subscription>(_entities[0].properties[0]);

  /// see [Subscription.name]
  static final name =
      QueryStringProperty<Subscription>(_entities[0].properties[1]);

  /// see [Subscription.type]
  static final type =
      QueryIntegerProperty<Subscription>(_entities[0].properties[2]);

  /// see [Subscription.price]
  static final price =
      QueryDoubleProperty<Subscription>(_entities[0].properties[3]);

  /// see [Subscription.color]
  static final color =
      QueryIntegerProperty<Subscription>(_entities[0].properties[4]);

  /// see [Subscription.currency]
  static final currency =
      QueryStringProperty<Subscription>(_entities[0].properties[5]);

  /// see [Subscription.isTaxFixed]
  static final isTaxFixed =
      QueryBooleanProperty<Subscription>(_entities[0].properties[6]);

  /// see [Subscription.tax]
  static final tax =
      QueryDoubleProperty<Subscription>(_entities[0].properties[7]);

  /// see [Subscription.date]
  static final date =
      QueryStringProperty<Subscription>(_entities[0].properties[8]);

  /// see [Subscription.month]
  static final month =
      QueryStringProperty<Subscription>(_entities[0].properties[9]);
}

/// [PouchSettings] entity fields to define ObjectBox queries.
class PouchSettings_ {
  /// see [PouchSettings.id]
  static final id =
      QueryIntegerProperty<PouchSettings>(_entities[1].properties[0]);

  /// see [PouchSettings.currency]
  static final currency =
      QueryStringProperty<PouchSettings>(_entities[1].properties[1]);
}

/// [OfflineExchangeRates] entity fields to define ObjectBox queries.
class OfflineExchangeRates_ {
  /// see [OfflineExchangeRates.id]
  static final id =
      QueryIntegerProperty<OfflineExchangeRates>(_entities[2].properties[0]);

  /// see [OfflineExchangeRates.serializedRates]
  static final serializedRates =
      QueryStringProperty<OfflineExchangeRates>(_entities[2].properties[1]);
}
